import 'd3-transition';
declare global {
    let padding: any;
    let paddingXaxis: any;
    let width: any;
    let height: any;
    let yAxis: {};
    let selected: [];
    let parcoords: {
        xScales: any;
        yScales: {};
        dragging: {};
        dragPosStart: {};
        currentPosOfDims: any;
        newFeatures: any;
        features: any[];
        newDataset: any;
        data: any;
    };
    let active: any;
    let key: string;
    let svg: any;
    let hoverlabel: string;
    let refreshData: any;
    let initDimension: any;
}
export declare function hide(dimension: string): void;
export declare function show(dimension: string): void;
export declare function getHiddenStatus(dimension: string): string;
export declare function invert(dimension: string): void;
export declare function invertWoTransition(dimension: string): void;
export declare function getInversionStatus(dimension: string): string;
export declare function setInversionStatus(dimension: string, status: string): void;
export declare function moveByOne(dimension: string, direction: string): void;
export declare function move(dimensionA: string, toRightOf: boolean, dimensionB: string): void;
export declare function swap(dimensionA: string, dimensionB: string): void;
export declare function getDimensionRange(dimension: string): any;
export declare function setDimensionRange(dimension: string, min: number, max: number): void;
export declare function setDimensionRangeRounded(dimension: string, min: number, max: number): void;
export declare function getMinValue(dimension: any): number;
export declare function getMaxValue(dimension: any): number;
export declare function getCurrentMinRange(dimension: any): number;
export declare function getCurrentMaxRange(dimension: any): number;
export declare function getFilter(dimension: string): [number, number];
export declare function setFilter(dimension: string, min: number, max: number): void;
export declare function getSelected(): any[];
export declare function setSelection(records: string[]): void;
export declare function isSelected(record: string): boolean;
export declare function toggleSelection(record: string): void;
export declare function setSelected(record: string): void;
export declare function setUnselected(record: string): void;
export declare function setSelectionWithId(recordIds: []): void;
export declare function isSelectedWithRecordId(recordId: number): boolean;
export declare function getRecordWithId(recordId: any): string;
export declare function toggleSelectionWithId(recordId: number): void;
export declare function setSelectedWithId(recordId: number): void;
export declare function setUnselectedWithId(recordId: number): void;
export declare function drawChart(content: any): void;
export declare function reset(): void;
export declare function refresh(): void;
export declare function deleteChart(): void;
export declare function getAllRecords(): any[];
export declare function getAllVisibleDimensionNames(): string[];
export declare function getAllDimensionNames(): string[];
export declare function getAllHiddenDimensionNames(): string[];
export declare function getNumberOfDimensions(): number;
export declare function getDimensionPosition(dimension: string): number;
export declare function isDimensionCategorical(dimension: string): boolean;
export declare function setDimensionForHovering(dimension: string): void;
export declare function createSvgString(): any;
export declare const throttleShowValues: (recordData: any) => void;
export declare function showMarker(dimension: any): void;
export declare function hideMarker(dimension: any): void;
